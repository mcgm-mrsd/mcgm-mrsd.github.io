{"version":3,"sources":["Molecules/DataControls.js","Molecules/GeneList.js","Molecules/PanelList.js","Molecules/Introduction.js","Molecules/Code.js","Organisms/NewSearch.js","Atoms/ResultsRow.js","Molecules/ResultsTable.js","Molecules/HighlightControls.js","Molecules/ResultsSummary.js","Organisms/Results.js","App.js","serviceWorker.js","index.js"],"names":["ControlWrapper","styled","Container","DataControls","props","handleChange","bind","onUpdatedValues","event","target","name","value","parseInt","controls","spliceJunctionCoverage","this","coverageThreshold","confidenceLevel","Row","Col","className","htmlFor","type","min","max","onChange","React","Component","GeneList","Form","Group","controlId","Label","Control","as","rows","data-testid","onBlur","handleBlur","panels","map","panel","key","DefaultValue","em","Introduction","href","Code","TabContent","div","NewSearch","data","split","val","trim","toUpperCase","filter","setSearchTerms","updateDataFile","component","initialValues","geneList","validate","values","errors","parseGeneList","length","selectedPanel","undefined","onSubmit","setSubmitting","touched","handleSubmit","isSubmitting","Tabs","defaultActiveKey","Tab","eventKey","title","PanelList","panelList","Alert","variant","Button","ResultsRow","result","blood","elementGenerator","fibro","lcl","muscle","gene_symbol","ensembl_id","transcript_type","Title","h2","FigureColumn","td","Positive","Borderline","Negative","ResultsTable","lower","upper","floatValue","parseFloat","isNaN","generateElement","Table","striped","bordered","hover","rowSpan","colSpan","results","HighlightControls","state","lowerThreshold","upperThreshold","setState","returnedValue","HeaderColumn","DataColumn","ResultsSummary","stats","notCovered","negative","positive","borderline","reduce","updateStats","generateStats","fibroblasts","total","generateTableCell","percentage","Math","round","colspan","Results","getSearchResults","jsonToCSV","delimiter","header","downloadString","generateTsv","updateHighlights","onClick","clearSearchTerms","download","App","cache","readRemoteFile","complete","parsed","item","loadData","filename","generateFileName","a","indexOf","Jumbotron","path","render","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.64accc78.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass DataControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n        let controls = {\n            spliceJunctionCoverage: this.props.spliceJunctionCoverage,\n            coverageThreshold: this.props.coverageThreshold,\n            confidenceLevel: this.props.confidenceLevel\n        };\n        controls[name] = value;\n\n        this.onUpdatedValues(controls);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"spliceJunctionCoverage\">Splice junction read coverage</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"spliceJunctionCoverage\"\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"20\"\n                                onChange={this.handleChange}\n                                value={this.props.spliceJunctionCoverage}\n                            />\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"coverageThreshold\">Proportion of splice junctions covered</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"coverageThreshold\"\n                                onChange={this.handleChange}\n                                value={this.props.coverageThreshold}\n                            >\n                                <option>75</option>\n                                <option>95</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"confidenceLevel\">Confidence level</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"confidenceLevel\"\n                                onChange={this.handleChange}\n                                value={this.props.confidenceLevel}\n                            >\n                                <option>95</option>\n                                <option>99</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default DataControls;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"geneList\">\n                <Form.Label>Gene list</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    rows=\"10\"\n                    data-testid=\"geneListInput\"\n                    onChange={this.props.handleChange}\n                    onBlur={this.props.handleBlur}\n                    value={this.props.value}\n                />\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"selectedPanel\">\n                <Form.Label>PanelApp panel</Form.Label>\n                <Form.Control\n                    as=\"select\"\n                    rows=\"10\"\n                    data-testid=\"panelListInput\"\n                    onChange={this.props.handleChange}\n                >\n                    <option></option>\n                    { this.props.panels.map(panel => {\n                    return (\n                        <option key=\"{panel}\">{panel}</option>\n                    );}) }\n                </Form.Control>\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DefaultValue = styled.em`\n    font-style: normal;\n    text-decoration: underline;\n`;\n\nfunction Introduction() {\n    return (\n        <>\n            <p>\n                This portal allows the generation of <strong>minimum required\n                sequencing depth</strong>, or <strong>MRSD</strong>, values for\n                genes and panels of interest.  The MRSD is the number (in <em>millions</em>)\n                of sequencing reads required from RNAseq experiments to\n                confidently determine aberrant splicing events for a gene of\n                interest.\n            </p>\n\n            <p>\n                The MRSD is uniquely calculated for each gene and tissue of\n                interest, and can guide the suitability of RNA extracted from\n                different tissues to determine significant changes in splicing\n                profiles.\n            </p>\n\n            <p>\n                The user can customise the <strong>confidence level</strong> (the\n                proportion of individuals in the GTEx dataset that would meet\n                specified criteria, <DefaultValue>default=95%</DefaultValue>),\n                the <strong>read coverage</strong> (number of uniquely mapped reads\n                spanning canonical splice junctions, <DefaultValue>default=8</DefaultValue>),\n                and the <strong>splice junction proportion</strong> (the desired\n                proportion of splice junctions with adequate coverage in the gene of\n                interest, <DefaultValue>default=75%</DefaultValue>).\n            </p>\n\n            <p>\n                More <a href=\"https://www.medrxiv.org/content/10.1101/2021.03.19.21253973v1\">details on the methodology are available on MedRxiv</a>.\n                If you use this tool, please cite our preprint.  Please\n                contact <a href=\"mailto:jamie.ellingford@manchester.ac.uk\">Jamie Ellingford</a> if\n                you require further help or support.\n            </p>\n        </>\n    );\n}\n\nexport default Introduction;\n","import React from 'react';\n\nfunction Code() {\n    return (\n        <>\n            <p>The Python code is available in <a href=\"https://github.com/mcgm-mrsd/mrsd-explorer\">GitHub</a>.</p>\n            <p>\n                You do not need any special software to access the code via GitHub.\n                However, if you wish to run it, you will need to\n                have <a href=\"https://www.python.org\">Python</a> installed.  A copy\n                of <a href=\"https://git-scm.com\">git</a> is recommended, but not required. \n            </p>\n        </>\n    );\n}\n\nexport default Code;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Formik, Form } from 'formik';\nimport { Alert, Button, Tab, Tabs } from 'react-bootstrap';\nimport DataControls from '../Molecules/DataControls';\nimport GeneList from '../Molecules/GeneList';\nimport PanelList from '../Molecules/PanelList';\nimport Introduction from '../Molecules/Introduction';\nimport Code from '../Molecules/Code';\n\nconst TabContent = styled.div`\n    padding: 0.75rem;\n`;\n\nclass NewSearch extends React.Component {\n    parseGeneList(data) {\n        return data\n            .split(\"\\n\")\n            .map(val => val.trim().toUpperCase())\n            .filter(val => val !== '');\n    }\n\n    render() {\n        const setSearchTerms = this.props.setSearchTerms;\n        const updateDataFile = this.props.updateDataFile;\n        const component = this;\n\n        return (\n            <>\n                <h2>New search</h2>\n                <Formik\n                    initialValues={{ geneList: '' }}\n                    validate={ values => {\n                        const errors = {};\n\n                        if ((component.parseGeneList(values.geneList).length === 0) && (values.selectedPanel === '' || values.selectedPanel === undefined)) {\n                            errors.geneList = 'You must supply either a PanelApp panel, or a list of genes to generate the data set';\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        setSearchTerms({\n                            geneList: values.selectedPanel ? [] : component.parseGeneList(values.geneList),\n                            selectedPanel: values.selectedPanel\n                        });\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }) => (\n                        <Form>\n                            <Tabs defaultActiveKey=\"geneListTab\">\n                                <Tab eventKey=\"geneListTab\" title=\"Gene list\" data-testid=\"geneListTab\">\n                                    <TabContent>\n                                        <DataControls\n                                            handleChange={updateDataFile}\n                                            spliceJunctionCoverage={component.props.spliceJunctionCoverage}\n                                            coverageThreshold={component.props.coverageThreshold}\n                                            confidenceLevel={component.props.confidenceLevel}\n                                        />\n                                        <PanelList\n                                            panels={component.props.panelList}\n                                            handleChange={handleChange}\n                                        />\n                                        <GeneList\n                                            handleChange={handleChange}\n                                            handleBlur={handleBlur}\n                                            value={values.geneList}\n                                        />\n                                    </TabContent>\n                                </Tab>\n                                <Tab eventKey=\"aboutTab\" title=\"About\">\n                                    <TabContent>\n                                        <Introduction />\n                                    </TabContent>\n                                </Tab>\n                                <Tab eventKey=\"codeTab\" title=\"Code\">\n                                    <TabContent>\n                                        <Code />\n                                    </TabContent>\n                                </Tab>\n                            </Tabs>\n                            { errors.geneList && touched.geneList &&\n                                <Alert variant=\"danger\" data-testid=\"error-message\">\n                                    { errors.geneList }\n                                </Alert>\n                            }\n                            <Button variant=\"primary\" type=\"submit\">\n                                Search\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default NewSearch;\n","import React from 'react';\n\nclass ResultsRow extends React.Component {\n    render() {\n        const result = this.props.result;\n\n        const blood = this.props.elementGenerator(result['MRSD(Blood)']);\n        const fibro = this.props.elementGenerator(result['MRSD(Fibroblasts)']);\n        const lcl = this.props.elementGenerator(result['MRSD(LCL)']);\n        const muscle = this.props.elementGenerator(result['MRSD(Muscle)']);\n\n        return (\n            <tr key={result.gene_symbol}>\n                <td>{result.gene_symbol}</td>\n                <td>{result.ensembl_id}</td>\n                <td>{result.transcript_type}</td>\n                <td>{result.panels}</td>\n                { blood }\n                { fibro }\n                { lcl }\n                { muscle }\n            </tr>\n        );\n    }\n}\n\nexport default ResultsRow;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nimport ResultsRow from '../Atoms/ResultsRow';\n\nconst Title = styled.h2`\n    margin-top: 2.5rem;\n    margin-bottom: 1rem;\n`;\n\nconst FigureColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(FigureColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(FigureColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(FigureColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsTable extends React.Component {\n    generateElement(lower, upper) {\n        return function (value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    return (<Negative>&mdash;</Negative>);\n                case floatValue > upper:\n                    return (<Negative>{value}</Negative>);\n                case floatValue < lower:\n                    return (<Positive>{value}</Positive>);\n                default:\n                    return (<Borderline>{value}</Borderline>);\n            }\n        };\n    }\n\n    render () {\n        const elementGenerator = this.generateElement(\n            parseFloat(this.props.lower),\n            parseFloat(this.props.upper)\n        );\n\n        return (\n            <>\n                <Title>Full results</Title>\n\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th rowSpan=\"2\">Gene Symbol</th>\n                            <th rowSpan=\"2\">Ensembl ID</th>\n                            <th rowSpan=\"2\">Transcript Type</th>\n                            <th rowSpan=\"2\">Panels</th>\n                            <th colSpan=\"4\">Minimum Read Sequencing Depth</th>\n                        </tr>\n                        <tr>\n                            <th>Blood</th>\n                            <th>Fibroblasts</th>\n                            <th>LCL</th>\n                            <th>Muscle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    { this.props.results.map(result => {\n                        return (\n                            <ResultsRow\n                                result={result}\n                                elementGenerator={elementGenerator}\n                            />\n                        );}) }\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default ResultsTable;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass HighlightControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { lowerThreshold: 50, upperThreshold: 100 };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n\n        this.setState({\n            [name]: value\n        });\n\n        let returnedValue = this.state;\n        returnedValue[name] = value;\n\n        this.onUpdatedValues(returnedValue);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"lowerThreshold\">Lower bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"lowerThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.lowerThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"upperThreshold\">Upper bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"upperThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.upperThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default HighlightControls;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nconst Title = styled.h2`\n    margin-top: 2.5rem;\n    margin-bottom: 1rem;\n`;\n\nconst HeaderColumn = styled.td`\n    text-align: center;\n`;\nconst DataColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(HeaderColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(HeaderColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(HeaderColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsSummary extends React.Component {\n    updateStats(lower, upper) {\n        return function (stats, value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    stats.notCovered++;\n                    return stats;\n                case floatValue > upper:\n                    stats.negative++;\n                    return stats;\n                case floatValue < lower:\n                    stats.positive++;\n                    return stats;\n                default:\n                    stats.borderline++;\n                    return stats;\n            }\n        }\n    }\n\n    generateStats(type) {\n        return type.reduce(\n            this.updateStats(\n                parseFloat(this.props.lower),\n                parseFloat(this.props.upper)\n            ),\n            {\n                notCovered: 0,\n                negative: 0,\n                borderline: 0,\n                positive: 0\n            }\n        );\n\n    }\n\n    render () {\n        const stats = {\n            blood: this.generateStats(this.props.results.map(result => result['MRSD(Blood)'])),\n            fibroblasts: this.generateStats(this.props.results.map(result => result['MRSD(Fibroblasts)'])),\n            lcl: this.generateStats(this.props.results.map(result => result['MRSD(LCL)'])),\n            muscle: this.generateStats(this.props.results.map(result => result['MRSD(Muscle)'])),\n            total: this.props.results.length\n        };\n\n        const generateTableCell = (value) => {\n            const percentage = Math.round((parseFloat(value) / parseFloat(stats.total)) * 100, 1);\n\n            return (\n                <DataColumn>{ value } ({ percentage }%)</DataColumn>\n            );\n        };\n\n        return (\n            <>\n                <Title>Summary</Title>\n\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th rowSpan=\"2\">Sequencing reads</th>\n                            <th colspan=\"4\">Genes covered (of { stats.total })</th>\n                        </tr>\n                        <tr>\n                            <th>Blood</th>\n                            <th>Fibroblasts</th>\n                            <th>LCL</th>\n                            <th>Muscle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <Positive>&lt; {this.props.lower}M</Positive>\n                            { generateTableCell(stats.blood.positive) }\n                            { generateTableCell(stats.fibroblasts.positive) }\n                            { generateTableCell(stats.lcl.positive) }\n                            { generateTableCell(stats.muscle.positive) }\n                        </tr>\n                        <tr>\n                            <Borderline>{this.props.lower}M to {this.props.upper}M</Borderline>\n                            { generateTableCell(stats.blood.borderline) }\n                            { generateTableCell(stats.fibroblasts.borderline) }\n                            { generateTableCell(stats.lcl.borderline) }\n                            { generateTableCell(stats.muscle.borderline) }\n                        </tr>\n                        <tr>\n                            <Negative>&gt; {this.props.upper}M</Negative>\n                            { generateTableCell(stats.blood.negative) }\n                            { generateTableCell(stats.fibroblasts.negative) }\n                            { generateTableCell(stats.lcl.negative) }\n                            { generateTableCell(stats.muscle.negative) }\n                        </tr>\n                        <tr>\n                            <Negative>Not covered</Negative>\n                            { generateTableCell(stats.blood.notCovered) }\n                            { generateTableCell(stats.fibroblasts.notCovered) }\n                            { generateTableCell(stats.lcl.notCovered) }\n                            { generateTableCell(stats.muscle.notCovered) }\n                        </tr>\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default ResultsSummary;\n","import React from 'react';\nimport { jsonToCSV } from 'react-papaparse';\n\nimport { Button } from 'react-bootstrap';\n\nimport ResultsTable from '../Molecules/ResultsTable';\nimport HighlightControls from '../Molecules/HighlightControls';\nimport ResultsSummary from '../Molecules/ResultsSummary';\n\nclass Results extends React.Component {\n    componentDidMount() {\n        this.setState({ results: this.props.getSearchResults() });\n    }\n\n    generateTsv(data) {\n        return 'data:text/tab-separated-values;charset=utf8,' + \n            jsonToCSV(data, { delimiter: \"\\t\", header: true });\n    }\n\n    updateHighlights(component) {\n        return function (values) {\n            component.setState(values);\n        };\n    }\n\n    render() {\n        const component = this;\n        const results = this.props.getSearchResults();\n        const downloadString = this.generateTsv(results);\n\n        const lowerThreshold = (this.state && this.state.lowerThreshold) ?? 50;\n        const upperThreshold = (this.state && this.state.upperThreshold) ?? 100;\n\n        return (\n            <div>\n                <HighlightControls\n                    handleChange={component.updateHighlights(component)}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n\n                <ResultsSummary\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n\n                <ResultsTable\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport './App.scss';\nimport { Container, Row, Col, Jumbotron } from \"react-bootstrap\";\n\nimport { readRemoteFile } from \"react-papaparse\";\nimport NewSearch from './Organisms/NewSearch';\nimport Results from './Organisms/Results';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cache: {},\n            data: null,\n            panelList: [],\n            selectedPanel: null,\n            spliceJunctionCoverage: 8,\n            coverageThreshold: 75,\n            confidenceLevel: 95\n        };\n    }\n\n    componentDidMount() {\n        let component = this;\n\n        readRemoteFile('./data/PanelApp_panel_names.tsv', {\n            header: false,\n            delimiter: \"\\t\",\n            complete: (parsed => {\n                component.setState({\n                    panelList: parsed.data.map((item) => item[0].trim()).filter((item) => item !== '')\n                });\n            })\n        });\n\n        this.loadData();\n    }\n\n    generateFileName(spliceJunctionCoverage, coverageThreshold, confidenceLevel) {\n        return `./data/all_GENCODE_${spliceJunctionCoverage}_0.${coverageThreshold}_0.${confidenceLevel}.results.master.short.tsv`;\n    }\n\n    loadData() {\n        let component = this;\n        const filename = this.generateFileName(\n            this.state.spliceJunctionCoverage,\n            this.state.coverageThreshold,\n            this.state.confidenceLevel\n        );\n\n        if (this.state.cache[filename] !== undefined) {\n            this.setState({\n                data: this.state.cache[filename]\n            });\n            return;\n        }\n\n        readRemoteFile(filename, {\n            header: true,\n            delimiter: \"\\t\",\n            complete: (parsed => {\n                let cache = component.state.cache;\n                cache[filename] = parsed.data;\n                component.setState({\n                    cache: cache,\n                    data: cache[filename]\n                })\n            })\n        });\n    }\n\n    updateDataFile(component) {\n        return async (data) => {\n            await component.setState(data);\n            component.loadData();\n        };\n    }\n\n    setSearchTerms(component) {\n        return (data) => {\n            component.setState(data);\n        };\n    }\n\n    clearSearchTerms(component) {\n        return () => {\n            component.setState({\n                geneList: null,\n                selectedPanel: null\n            });\n        };\n    }\n\n    getSearchResults(component) {\n        return function () {\n            if (!component.state || !component.state.data || !component.state.geneList) {\n                return [];\n            }\n\n            return component.state.data\n                .filter(item => {\n                    const panelList = item.panels ? item.panels.split(';') : [];\n\n                    return (component.state.geneList.indexOf(item.gene_symbol) !== -1)\n                        || (panelList.indexOf(component.state.selectedPanel) !== -1);\n                });\n        };\n    }\n\n    render() {\n        return (\n            <Router>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Jumbotron>\n                                <h1>MRSD Web Portal</h1>\n                            </Jumbotron>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Switch>\n                                <Route\n                                    path=\"/results\"\n                                    render={() => {\n                                        return (\n                                            !this.state || !this.state.geneList || !this.state.data ?\n                                                <Redirect to=\"/\" /> :\n                                                <Results\n                                                    clearSearchTerms={this.clearSearchTerms(this)}\n                                                    getSearchResults={this.getSearchResults(this)}\n                                                />\n                                        );\n                                    }}\n                                />\n                                <Route\n                                    path=\"/\"\n                                    render={() => {\n                                        return (\n                                            this.state && this.state.geneList && this.state.data ?\n                                                <Redirect to=\"/results\" /> :\n                                                <NewSearch\n                                                    setSearchTerms={this.setSearchTerms(this)}\n                                                    updateDataFile={this.updateDataFile(this)}\n                                                    panelList={this.state.panelList}\n                                                    spliceJunctionCoverage={this.state.spliceJunctionCoverage}\n                                                    coverageThreshold={this.state.coverageThreshold}\n                                                    confidenceLevel={this.state.confidenceLevel}\n                                                />\n                                        );\n                                    }}\n                                />\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}