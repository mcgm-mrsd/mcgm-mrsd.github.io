{"version":3,"sources":["Molecules/GeneList.js","Molecules/Introduction.js","Organisms/NewSearch.js","Atoms/ResultsRow.js","Molecules/ResultsTable.js","Molecules/HighlightControls.js","Organisms/Results.js","App.js","serviceWorker.js","index.js"],"names":["GeneList","Form","Group","controlId","Label","Control","as","rows","data-testid","onChange","this","props","handleChange","onBlur","handleBlur","value","React","Component","DefaultValue","styled","em","Introduction","NewSearch","data","split","map","val","trim","toUpperCase","filter","setSearchTerms","component","initialValues","geneList","validate","values","errors","parseGeneList","length","onSubmit","setSubmitting","touched","handleSubmit","isSubmitting","Tabs","defaultActiveKey","Tab","eventKey","title","Alert","variant","Button","type","ResultsRow","result","blood","elementGenerator","lcl","muscle","key","gene_symbol","ensembl_id","transcript_type","panels","FigureColumn","td","Positive","Borderline","Negative","ResultsTable","lower","upper","floatValue","parseFloat","isNaN","generateElement","Table","striped","bordered","hover","results","ControlWrapper","Container","HighlightControls","state","lowerThreshold","upperThreshold","bind","onUpdatedValues","event","target","name","parseInt","setState","returnedValue","Row","Col","className","htmlFor","class","min","Results","getSearchResults","jsonToCSV","delimiter","header","downloadString","generateTsv","updateHighlights","onClick","clearSearchTerms","href","download","App","readRemoteFile","complete","parsed","item","indexOf","Jumbotron","path","render","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9350be40.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"geneList\">\n                <Form.Label>Gene list</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    rows=\"10\"\n                    data-testid=\"geneListInput\"\n                    onChange={this.props.handleChange}\n                    onBlur={this.props.handleBlur}\n                    value={this.props.value}\n                />\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DefaultValue = styled.em`\n    font-style: normal;\n    text-decoration: underline;\n`;\n\nfunction Introduction() {\n    return (\n        <>\n            <p>\n                This portal allows the generation of <strong>minimum required\n                sequencing depth</strong>, or <strong>MRSD</strong>, values for\n                genes and panels of interest.  The MRSD is the number (in <em>millions</em>)\n                of sequencing reads required from RNAseq experiments to\n                confidently determine aberrant splicing events for a gene of\n                interest.\n            </p>\n\n            <p>\n                The MRSD is uniquely calculated for each gene and tissue of\n                interest, and can guide the suitability of RNA extracted from\n                different tissues to determine significant changes in splicing\n                profiles.\n            </p>\n\n            <p>\n                The user can customise the <strong>confidence level</strong> (the\n                proportion of individuals in the GTEx dataset that would meet\n                specified criteria, <DefaultValue>default=95%</DefaultValue>),\n                the <strong>read coverage</strong> (number of uniquely mapped reads\n                spanning canonical splice junctions, <DefaultValue>default=8</DefaultValue>),\n                and the <strong>splice junction proportion</strong> (the desired\n                proportion of splice junctions with adequate coverage in the gene of\n                interest, <DefaultValue>default=75%</DefaultValue>).\n            </p>\n\n            <p>\n                More details on the methodology are available (here).\n            </p>\n        </>\n    );\n}\n\nexport default Introduction;\n","import React from 'react';\n\nimport { Formik, Form } from 'formik';\nimport { Alert, Button, Tab, Tabs } from 'react-bootstrap';\nimport GeneList from '../Molecules/GeneList';\nimport Introduction from '../Molecules/Introduction';\n\nclass NewSearch extends React.Component {\n    parseGeneList(data) {\n        return data\n            .split(\"\\n\")\n            .map(val => val.trim().toUpperCase())\n            .filter(val => val !== '');\n    }\n\n    render() {\n        const setSearchTerms = this.props.setSearchTerms;\n        const component = this;\n\n        return (\n            <>\n                <h2>New search</h2>\n                <Formik\n                    initialValues={{ geneList: '' }}\n                    validate={ values => {\n                        const errors = {};\n                        if (component.parseGeneList(values.geneList).length === 0) {\n                            errors.geneList = 'You must supply a list of genes to generate the data set';\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        setSearchTerms({\n                            geneList: component.parseGeneList(values.geneList)\n                        });\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }) => (\n                        <Form>\n                            <Tabs defaultActiveKey=\"geneListTab\">\n                                <Tab eventKey=\"geneListTab\" title=\"Gene list\" data-testid=\"geneListTab\">\n                                    <GeneList\n                                        handleChange={handleChange}\n                                        handleBlur={handleBlur}\n                                        value={values.geneList}\n                                    />\n                                </Tab>\n                                <Tab eventKey=\"aboutTab\" title=\"About\">\n                                    <Introduction />\n                                </Tab>\n                            </Tabs>\n                            { errors.geneList && touched.geneList &&\n                                <Alert variant=\"danger\" data-testid=\"error-message\">\n                                    { errors.geneList }\n                                </Alert>\n                            }\n                            <Button variant=\"primary\" type=\"submit\">\n                                Search\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default NewSearch;\n","import React from 'react';\n\nclass ResultsRow extends React.Component {\n    render() {\n        const result = this.props.result;\n\n        const blood = this.props.elementGenerator(result['MRSD(Blood)']);\n        const lcl = this.props.elementGenerator(result['MRSD(LCL)']);\n        const muscle = this.props.elementGenerator(result['MRSD(Muscle)']);\n\n        return (\n            <tr key={result.gene_symbol}>\n                <td>{result.gene_symbol}</td>\n                <td>{result.ensembl_id}</td>\n                <td>{result.transcript_type}</td>\n                <td>{result.panels}</td>\n                { blood }\n                { lcl }\n                { muscle }\n            </tr>\n        );\n    }\n}\n\nexport default ResultsRow;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nimport ResultsRow from '../Atoms/ResultsRow';\n\nconst FigureColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(FigureColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(FigureColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(FigureColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsTable extends React.Component {\n    generateElement(lower, upper) {\n        return function (value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    return (<Negative>&mdash;</Negative>);\n                case floatValue > upper:\n                    return (<Negative>{value}</Negative>);\n                case floatValue < lower:\n                    return (<Positive>{value}</Positive>);\n                default:\n                    return (<Borderline>{value}</Borderline>);\n            }\n        };\n    }\n\n    render () {\n        const elementGenerator = this.generateElement(\n            parseFloat(this.props.lower),\n            parseFloat(this.props.upper)\n        );\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Gene Symbol</th>\n                        <th>Ensembl ID</th>\n                        <th>Transcript type</th>\n                        <th>Panels</th>\n                        <th>MRSD(Blood)</th>\n                        <th>MRSD(LCL)</th>\n                        <th>MRSD(Muscle)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                { this.props.results.map(result => {\n                    return (\n                        <ResultsRow\n                            result={result}\n                            elementGenerator={elementGenerator}\n                        />\n                    );}) }\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default ResultsTable;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass HighlightControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { lowerThreshold: 50, upperThreshold: 100 };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n\n        this.setState({\n            [name]: value\n        });\n\n        let returnedValue = this.state;\n        returnedValue[name] = value;\n\n        this.onUpdatedValues(returnedValue);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"lowerThreshold\">Lower bound</label>\n                        <div class=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"lowerThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.lowerThreshold}\n                            />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"upperThreshold\">Upper bound</label>\n                        <div class=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"upperThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.upperThreshold}\n                            />\n                            <div class=\"input-group-append\">\n                                <span class=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default HighlightControls;\n","import React from 'react';\nimport { jsonToCSV } from 'react-papaparse';\n\nimport { Button } from 'react-bootstrap';\n\nimport ResultsTable from '../Molecules/ResultsTable';\nimport HighlightControls from '../Molecules/HighlightControls';\n\nclass Results extends React.Component {\n    componentDidMount() {\n        this.setState({ results: this.props.getSearchResults() });\n    }\n\n    generateTsv(data) {\n        return 'data:text/tab-separated-values;charset=utf8,' + \n            jsonToCSV(data, { delimiter: \"\\t\", header: true });\n    }\n\n    updateHighlights(component) {\n        return function (values) {\n            component.setState(values);\n        };\n    }\n\n    render() {\n        const component = this;\n        const results = this.props.getSearchResults();\n        const downloadString = this.generateTsv(results);\n\n        const lowerThreshold = (this.state && this.state.lowerThreshold) ?? 50;\n        const upperThreshold = (this.state && this.state.upperThreshold) ?? 100;\n\n        return (\n            <div>\n                <HighlightControls\n                    handleChange={component.updateHighlights(component)}\n                />\n                <ResultsTable\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport './App.scss';\nimport { Container, Row, Col, Jumbotron } from \"react-bootstrap\";\n\nimport { readRemoteFile } from \"react-papaparse\";\nimport NewSearch from './Organisms/NewSearch';\nimport Results from './Organisms/Results';\n\nclass App extends React.Component {\n    componentDidMount() {\n        let component = this;\n\n        readRemoteFile('./data/all-gencode-genes.master.short.tsv', {\n            header: true,\n            delimiter: \"\\t\",\n            complete: (parsed => component.setState({ data: parsed.data }))\n        });\n    }\n\n    setSearchTerms(component) {\n        return (data) => {\n            component.setState({\n                geneList: data.geneList\n            });\n        };\n    }\n\n    clearSearchTerms(component) {\n        return () => {\n            component.setState({\n                geneList: null\n            });\n        };\n    }\n\n    getSearchResults(component) {\n        return function () {\n            if (!component.state || !component.state.data || !component.state.geneList) {\n                return [];\n            }\n\n            return component.state.data\n                .filter(item => {\n                    return component.state.geneList.indexOf(item.gene_symbol) !== -1;\n                });\n        };\n    }\n\n    render() {\n        return (\n            <Router>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Jumbotron>\n                                <h1>MRSD Web Portal</h1>\n                            </Jumbotron>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Switch>\n                                <Route\n                                    path=\"/results\"\n                                    render={() => {\n                                        return (\n                                            !this.state || !this.state.geneList || !this.state.data ?\n                                                <Redirect to=\"/\" /> :\n                                                <Results\n                                                    clearSearchTerms={this.clearSearchTerms(this)}\n                                                    getSearchResults={this.getSearchResults(this)}\n                                                />\n                                        );\n                                    }}\n                                />\n                                <Route\n                                    path=\"/\"\n                                    render={() => {\n                                        return (\n                                            this.state && this.state.geneList && this.state.data ?\n                                                <Redirect to=\"/results\" /> :\n                                                <NewSearch\n                                                    setSearchTerms={this.setSearchTerms(this)}\n                                                />\n                                        );\n                                    }}\n                                />\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}