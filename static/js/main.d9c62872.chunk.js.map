{"version":3,"sources":["Molecules/DataControls.js","Molecules/GeneList.js","Molecules/Introduction.js","Organisms/NewSearch.js","Atoms/ResultsRow.js","Molecules/ResultsTable.js","Molecules/HighlightControls.js","Organisms/Results.js","App.js","serviceWorker.js","index.js"],"names":["ControlWrapper","styled","Container","DataControls","props","state","handleChange","bind","onUpdatedValues","event","target","name","value","parseInt","controls","spliceJunctionCoverage","this","coverageThreshold","confidenceLevel","Row","Col","className","htmlFor","type","min","max","onChange","React","Component","GeneList","Form","Group","controlId","Label","Control","as","rows","data-testid","onBlur","handleBlur","DefaultValue","em","Introduction","href","NewSearch","data","split","map","val","trim","toUpperCase","filter","setSearchTerms","updateDataFile","component","initialValues","geneList","validate","values","errors","parseGeneList","length","onSubmit","setSubmitting","touched","handleSubmit","isSubmitting","Tabs","defaultActiveKey","Tab","eventKey","title","Alert","variant","Button","ResultsRow","result","blood","elementGenerator","fibro","lcl","muscle","key","gene_symbol","ensembl_id","transcript_type","panels","FigureColumn","td","Positive","Borderline","Negative","ResultsTable","lower","upper","floatValue","parseFloat","isNaN","generateElement","Table","striped","bordered","hover","rowSpan","colSpan","results","HighlightControls","lowerThreshold","upperThreshold","setState","returnedValue","Results","getSearchResults","jsonToCSV","delimiter","header","downloadString","generateTsv","updateHighlights","onClick","clearSearchTerms","download","App","console","log","cache","filename","generateFileName","undefined","readRemoteFile","complete","parsed","loadData","a","item","indexOf","Jumbotron","path","render","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d9c62872.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass DataControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = props;\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n        let controls = {\n            spliceJunctionCoverage: this.props.spliceJunctionCoverage,\n            coverageThreshold: this.props.coverageThreshold,\n            confidenceLevel: this.props.confidenceLevel\n        };\n        controls[name] = value;\n\n        this.onUpdatedValues(controls);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"spliceJunctionCoverage\">Splice junction read coverage</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"spliceJunctionCoverage\"\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"20\"\n                                onChange={this.handleChange}\n                                value={this.props.spliceJunctionCoverage}\n                            />\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"coverageThreshold\">Proportion of splice junctions covered</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"coverageThreshold\"\n                                onChange={this.handleChange}\n                                value={this.props.coverageThreshold}\n                            >\n                                <option>75</option>\n                                <option>95</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"confidenceLevel\">Confidence level</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"confidenceLevel\"\n                                onChange={this.handleChange}\n                                value={this.props.confidenceLevel}\n                            >\n                                <option>95</option>\n                                <option>99</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default DataControls;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"geneList\">\n                <Form.Label>Gene list</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    rows=\"10\"\n                    data-testid=\"geneListInput\"\n                    onChange={this.props.handleChange}\n                    onBlur={this.props.handleBlur}\n                    value={this.props.value}\n                />\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DefaultValue = styled.em`\n    font-style: normal;\n    text-decoration: underline;\n`;\n\nfunction Introduction() {\n    return (\n        <>\n            <p>\n                This portal allows the generation of <strong>minimum required\n                sequencing depth</strong>, or <strong>MRSD</strong>, values for\n                genes and panels of interest.  The MRSD is the number (in <em>millions</em>)\n                of sequencing reads required from RNAseq experiments to\n                confidently determine aberrant splicing events for a gene of\n                interest.\n            </p>\n\n            <p>\n                The MRSD is uniquely calculated for each gene and tissue of\n                interest, and can guide the suitability of RNA extracted from\n                different tissues to determine significant changes in splicing\n                profiles.\n            </p>\n\n            <p>\n                The user can customise the <strong>confidence level</strong> (the\n                proportion of individuals in the GTEx dataset that would meet\n                specified criteria, <DefaultValue>default=95%</DefaultValue>),\n                the <strong>read coverage</strong> (number of uniquely mapped reads\n                spanning canonical splice junctions, <DefaultValue>default=8</DefaultValue>),\n                and the <strong>splice junction proportion</strong> (the desired\n                proportion of splice junctions with adequate coverage in the gene of\n                interest, <DefaultValue>default=75%</DefaultValue>).\n            </p>\n\n            <p>\n                More details on the methodology are available (here).  If you require any\n                further help or support please contact <a href=\"mailto:jamie.ellingford@manchester.ac.uk\">Jamie Ellingford</a>.\n            </p>\n        </>\n    );\n}\n\nexport default Introduction;\n","import React from 'react';\n\nimport { Formik, Form } from 'formik';\nimport { Alert, Button, Tab, Tabs } from 'react-bootstrap';\nimport DataControls from '../Molecules/DataControls';\nimport GeneList from '../Molecules/GeneList';\nimport Introduction from '../Molecules/Introduction';\n\nclass NewSearch extends React.Component {\n    parseGeneList(data) {\n        return data\n            .split(\"\\n\")\n            .map(val => val.trim().toUpperCase())\n            .filter(val => val !== '');\n    }\n\n    render() {\n        const setSearchTerms = this.props.setSearchTerms;\n        const updateDataFile = this.props.updateDataFile;\n        const component = this;\n\n        return (\n            <>\n                <h2>New search</h2>\n                <Formik\n                    initialValues={{ geneList: '' }}\n                    validate={ values => {\n                        const errors = {};\n                        if (component.parseGeneList(values.geneList).length === 0) {\n                            errors.geneList = 'You must supply a list of genes to generate the data set';\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        setSearchTerms({\n                            geneList: component.parseGeneList(values.geneList)\n                        });\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }) => (\n                        <Form>\n                            <Tabs defaultActiveKey=\"geneListTab\">\n                                <Tab eventKey=\"geneListTab\" title=\"Gene list\" data-testid=\"geneListTab\">\n                                    <DataControls\n                                        handleChange={updateDataFile}\n                                        spliceJunctionCoverage={component.props.spliceJunctionCoverage}\n                                        coverageThreshold={component.props.coverageThreshold}\n                                        confidenceLevel={component.props.confidenceLevel}\n                                    />\n                                    <GeneList\n                                        handleChange={handleChange}\n                                        handleBlur={handleBlur}\n                                        value={values.geneList}\n                                    />\n                                </Tab>\n                                <Tab eventKey=\"aboutTab\" title=\"About\">\n                                    <Introduction />\n                                </Tab>\n                            </Tabs>\n                            { errors.geneList && touched.geneList &&\n                                <Alert variant=\"danger\" data-testid=\"error-message\">\n                                    { errors.geneList }\n                                </Alert>\n                            }\n                            <Button variant=\"primary\" type=\"submit\">\n                                Search\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default NewSearch;\n","import React from 'react';\n\nclass ResultsRow extends React.Component {\n    render() {\n        const result = this.props.result;\n\n        const blood = this.props.elementGenerator(result['MRSD(Blood)']);\n        const fibro = this.props.elementGenerator(result['MRSD(Fibroblasts)']);\n        const lcl = this.props.elementGenerator(result['MRSD(LCL)']);\n        const muscle = this.props.elementGenerator(result['MRSD(Muscle)']);\n\n        return (\n            <tr key={result.gene_symbol}>\n                <td>{result.gene_symbol}</td>\n                <td>{result.ensembl_id}</td>\n                <td>{result.transcript_type}</td>\n                <td>{result.panels}</td>\n                { blood }\n                { fibro }\n                { lcl }\n                { muscle }\n            </tr>\n        );\n    }\n}\n\nexport default ResultsRow;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nimport ResultsRow from '../Atoms/ResultsRow';\n\nconst FigureColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(FigureColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(FigureColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(FigureColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsTable extends React.Component {\n    generateElement(lower, upper) {\n        return function (value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    return (<Negative>&mdash;</Negative>);\n                case floatValue > upper:\n                    return (<Negative>{value}</Negative>);\n                case floatValue < lower:\n                    return (<Positive>{value}</Positive>);\n                default:\n                    return (<Borderline>{value}</Borderline>);\n            }\n        };\n    }\n\n    render () {\n        const elementGenerator = this.generateElement(\n            parseFloat(this.props.lower),\n            parseFloat(this.props.upper)\n        );\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th rowSpan=\"2\">Gene Symbol</th>\n                        <th rowSpan=\"2\">Ensembl ID</th>\n                        <th rowSpan=\"2\">Transcript Type</th>\n                        <th rowSpan=\"2\">Panels</th>\n                        <th colSpan=\"4\">Minimum Read Sequencing Depth</th>\n                    </tr>\n                    <tr>\n                        <th>Blood</th>\n                        <th>Fibroblasts</th>\n                        <th>LCL</th>\n                        <th>Muscle</th>\n                    </tr>\n                </thead>\n                <tbody>\n                { this.props.results.map(result => {\n                    return (\n                        <ResultsRow\n                            result={result}\n                            elementGenerator={elementGenerator}\n                        />\n                    );}) }\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default ResultsTable;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass HighlightControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { lowerThreshold: 50, upperThreshold: 100 };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n\n        this.setState({\n            [name]: value\n        });\n\n        let returnedValue = this.state;\n        returnedValue[name] = value;\n\n        this.onUpdatedValues(returnedValue);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"lowerThreshold\">Lower bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"lowerThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.lowerThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"upperThreshold\">Upper bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"upperThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.upperThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default HighlightControls;\n","import React from 'react';\nimport { jsonToCSV } from 'react-papaparse';\n\nimport { Button } from 'react-bootstrap';\n\nimport ResultsTable from '../Molecules/ResultsTable';\nimport HighlightControls from '../Molecules/HighlightControls';\n\nclass Results extends React.Component {\n    componentDidMount() {\n        this.setState({ results: this.props.getSearchResults() });\n    }\n\n    generateTsv(data) {\n        return 'data:text/tab-separated-values;charset=utf8,' + \n            jsonToCSV(data, { delimiter: \"\\t\", header: true });\n    }\n\n    updateHighlights(component) {\n        return function (values) {\n            component.setState(values);\n        };\n    }\n\n    render() {\n        const component = this;\n        const results = this.props.getSearchResults();\n        const downloadString = this.generateTsv(results);\n\n        const lowerThreshold = (this.state && this.state.lowerThreshold) ?? 50;\n        const upperThreshold = (this.state && this.state.upperThreshold) ?? 100;\n\n        return (\n            <div>\n                <HighlightControls\n                    handleChange={component.updateHighlights(component)}\n                />\n                <ResultsTable\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport './App.scss';\nimport { Container, Row, Col, Jumbotron } from \"react-bootstrap\";\n\nimport { readRemoteFile } from \"react-papaparse\";\nimport NewSearch from './Organisms/NewSearch';\nimport Results from './Organisms/Results';\n\nclass App extends React.Component {\n    constructor(props) {\n        console.log(\"I am a constructor\");\n        super(props);\n        this.state = {\n            cache: {},\n            data: null,\n            spliceJunctionCoverage: 8,\n            coverageThreshold: 75,\n            confidenceLevel: 95\n        };\n    }\n\n    generateFileName(spliceJunctionCoverage, coverageThreshold, confidenceLevel) {\n        return `./data/all_GENCODE_${spliceJunctionCoverage}_0.${coverageThreshold}_0.${confidenceLevel}.results.master.short.tsv`;\n    }\n\n    loadData() {\n        let component = this;\n        const filename = this.generateFileName(\n            this.state.spliceJunctionCoverage,\n            this.state.coverageThreshold,\n            this.state.confidenceLevel\n        );\n\n        if (this.state.cache[filename] !== undefined) {\n            this.setState({\n                data: this.state.cache[filename]\n            });\n            return;\n        }\n\n        readRemoteFile(filename, {\n            header: true,\n            delimiter: \"\\t\",\n            complete: (parsed => {\n                let cache = component.state.cache;\n                cache[filename] = parsed.data;\n                component.setState({\n                    cache: cache,\n                    data: cache[filename]\n                })\n            })\n        });\n    }\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    updateDataFile(component) {\n        return async (data) => {\n            await component.setState(data);\n            component.loadData();\n        };\n    }\n\n    setSearchTerms(component) {\n        return (data) => {\n            component.setState({\n                geneList: data.geneList\n            });\n        };\n    }\n\n    clearSearchTerms(component) {\n        return () => {\n            component.setState({\n                geneList: null\n            });\n        };\n    }\n\n    getSearchResults(component) {\n        return function () {\n            if (!component.state || !component.state.data || !component.state.geneList) {\n                return [];\n            }\n\n            return component.state.data\n                .filter(item => {\n                    return component.state.geneList.indexOf(item.gene_symbol) !== -1;\n                });\n        };\n    }\n\n    render() {\n        return (\n            <Router>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Jumbotron>\n                                <h1>MRSD Web Portal</h1>\n                            </Jumbotron>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Switch>\n                                <Route\n                                    path=\"/results\"\n                                    render={() => {\n                                        return (\n                                            !this.state || !this.state.geneList || !this.state.data ?\n                                                <Redirect to=\"/\" /> :\n                                                <Results\n                                                    clearSearchTerms={this.clearSearchTerms(this)}\n                                                    getSearchResults={this.getSearchResults(this)}\n                                                />\n                                        );\n                                    }}\n                                />\n                                <Route\n                                    path=\"/\"\n                                    render={() => {\n                                        return (\n                                            this.state && this.state.geneList && this.state.data ?\n                                                <Redirect to=\"/results\" /> :\n                                                <NewSearch\n                                                    setSearchTerms={this.setSearchTerms(this)}\n                                                    updateDataFile={this.updateDataFile(this)}\n                                                    spliceJunctionCoverage={this.state.spliceJunctionCoverage}\n                                                    coverageThreshold={this.state.coverageThreshold}\n                                                    confidenceLevel={this.state.confidenceLevel}\n                                                />\n                                        );\n                                    }}\n                                />\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}