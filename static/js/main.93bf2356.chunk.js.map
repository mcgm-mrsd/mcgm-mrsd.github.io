{"version":3,"sources":["Molecules/DataControls.js","Molecules/GeneList.js","Molecules/PanelList.js","Molecules/Introduction.js","Molecules/Code.js","Organisms/NewSearch.js","Atoms/ResultsRow.js","Molecules/ResultsTable.js","Molecules/HighlightControls.js","Molecules/ResultsSummary.js","Organisms/Results.js","App.js","serviceWorker.js","index.js"],"names":["ControlWrapper","styled","Container","DataControls","props","handleChange","bind","onUpdatedValues","event","target","name","value","parseInt","controls","spliceJunctionCoverage","this","coverageThreshold","confidenceLevel","Row","Col","className","htmlFor","type","min","max","onChange","React","Component","GeneList","Form","Group","controlId","Label","Control","as","rows","data-testid","onBlur","handleBlur","panels","map","panel","key","DefaultValue","em","Introduction","href","Code","rel","dir","TabContent","div","NewSearch","data","split","val","trim","toUpperCase","filter","setSearchTerms","updateDataFile","component","initialValues","geneList","validate","values","errors","parseGeneList","length","selectedPanel","undefined","onSubmit","setSubmitting","touched","handleSubmit","isSubmitting","Tabs","defaultActiveKey","Tab","eventKey","title","PanelList","panelList","Alert","variant","Button","ResultsRow","result","blood","elementGenerator","fibro","lcl","muscle","gene_symbol","ensembl_id","transcript_type","Title","h2","FigureColumn","td","Positive","Borderline","Negative","ResultsTable","lower","upper","floatValue","parseFloat","isNaN","generateElement","Table","striped","bordered","hover","rowSpan","colSpan","results","HighlightControls","state","lowerThreshold","upperThreshold","setState","returnedValue","HeaderColumn","DataColumn","ResultsSummary","stats","notCovered","negative","positive","borderline","reduce","updateStats","generateStats","fibroblasts","total","generateTableCell","percentage","Math","round","colspan","Results","getSearchResults","jsonToCSV","delimiter","header","downloadString","generateTsv","updateHighlights","onClick","clearSearchTerms","download","App","cache","readRemoteFile","complete","parsed","item","loadData","filename","generateFileName","a","indexOf","Jumbotron","path","render","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.93bf2356.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass DataControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n        let controls = {\n            spliceJunctionCoverage: this.props.spliceJunctionCoverage,\n            coverageThreshold: this.props.coverageThreshold,\n            confidenceLevel: this.props.confidenceLevel\n        };\n        controls[name] = value;\n\n        this.onUpdatedValues(controls);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"spliceJunctionCoverage\">Splice junction read coverage</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"spliceJunctionCoverage\"\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"20\"\n                                onChange={this.handleChange}\n                                value={this.props.spliceJunctionCoverage}\n                            />\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"coverageThreshold\">Proportion of splice junctions covered</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"coverageThreshold\"\n                                onChange={this.handleChange}\n                                value={this.props.coverageThreshold}\n                            >\n                                <option>75</option>\n                                <option>95</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"confidenceLevel\">Confidence level</label>\n                        <div className=\"input-group\">\n                            <select\n                                className=\"form-control\"\n                                name=\"confidenceLevel\"\n                                onChange={this.handleChange}\n                                value={this.props.confidenceLevel}\n                            >\n                                <option>95</option>\n                                <option>99</option>\n                            </select>\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">%</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default DataControls;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"geneList\">\n                <Form.Label>Gene list</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    rows=\"10\"\n                    data-testid=\"geneListInput\"\n                    onChange={this.props.handleChange}\n                    onBlur={this.props.handleBlur}\n                    value={this.props.value}\n                />\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\n\nimport { Form } from 'react-bootstrap';\n\nclass GeneList extends React.Component {\n    render() {\n        return (\n            <Form.Group controlId=\"selectedPanel\">\n                <Form.Label>PanelApp panel</Form.Label>\n                <Form.Control\n                    as=\"select\"\n                    rows=\"10\"\n                    data-testid=\"panelListInput\"\n                    onChange={this.props.handleChange}\n                >\n                    <option></option>\n                    { this.props.panels.map(panel => {\n                    return (\n                        <option key=\"{panel}\">{panel}</option>\n                    );}) }\n                </Form.Control>\n            </Form.Group>\n        );\n    }\n}\n\nexport default GeneList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DefaultValue = styled.em`\n    font-style: normal;\n    text-decoration: underline;\n`;\n\nfunction Introduction() {\n    return (\n        <>\n            <p>\n                This portal allows the generation of <strong>minimum required\n                sequencing depth</strong>, or <strong>MRSD</strong>, values for\n                genes and panels of interest.  The MRSD is the number (in <em>millions</em>)\n                of sequencing reads required from RNAseq experiments to\n                confidently determine aberrant splicing events for a gene of\n                interest.\n            </p>\n\n            <p>\n                The MRSD is uniquely calculated for each gene and tissue of\n                interest, and can guide the suitability of RNA extracted from\n                different tissues to determine significant changes in splicing\n                profiles.\n            </p>\n\n            <p>\n                The user can customise the <strong>confidence level</strong> (the\n                proportion of individuals in the GTEx dataset that would meet\n                specified criteria, <DefaultValue>default=95%</DefaultValue>),\n                the <strong>read coverage</strong> (number of uniquely mapped reads\n                spanning canonical splice junctions, <DefaultValue>default=8</DefaultValue>),\n                and the <strong>splice junction proportion</strong> (the desired\n                proportion of splice junctions with adequate coverage in the gene of\n                interest, <DefaultValue>default=75%</DefaultValue>).\n            </p>\n\n            <p>\n                More <a href=\"https://www.medrxiv.org/content/10.1101/2021.03.19.21253973v1\">details on the methodology are available on MedRxiv</a>.\n                If you use this tool, please cite our preprint.  Please\n                contact <a href=\"mailto:jamie.ellingford@manchester.ac.uk\">Jamie Ellingford</a> if\n                you require further help or support.\n            </p>\n        </>\n    );\n}\n\nexport default Introduction;\n","import React from 'react';\n\nfunction Code() {\n    return (\n        <>\n            <h1>MRSDexplorer</h1>\n            <p>\n                Toolkit for generation of Minimum Required Sequencing Depth (MRSD)\n                calculations from RNA-seq datasets.  The Python code is available in <a href=\"https://github.com/mcgm-mrsd/mrsd-explorer\">GitHub</a>.\n            </p>\n            <h2> \n                Table of Contents\n            </h2>\n            <ul>\n                <li><a href=\"#overview\">Overview</a></li>\n                <li><a href=\"#inputfiles\">Generation of MRSD input files</a>\n                    <ul>\n                        <li><a href=\"#counts\">Junction counts</a></li>\n                        <li><a href=\"#depths\">Sequencing depths</a></li>\n                        <li><a href=\"#genes\">Genes/Transcripts of interest</a></li>\n                    </ul>\n                </li>\n                <li><a href=\"#run\">Running MRSD</a></li>\n                <li><a href=\"#output\">Output file formats</a></li>\n            </ul>\n            <h2><a name=\"user-content-overview\"></a>Overview</h2>\n            <p>MRSD (Minimum Required Sequencing Depth) is a statistical framework to predict the depth of RNA sequencing required to achieve a user-specified level of coverage of a transcript(s) of interest. MRSD score calculations and utility have been described in detail in our recent manuscript (<a href=\"https://doi.org/10.1016/j.ajhg.2021.12.014\" rel=\"nofollow\">https://doi.org/10.1016/j.ajhg.2021.12.014</a>).</p>\n            <p>These MRSD scores are derived from RNA-seq data available through the Genotype-Tissue Expression project (GTEx, <a href=\"https://www.gtexportal.org/home/\" rel=\"nofollow\">https://www.gtexportal.org/home/</a>). GTEx samples are sequenced using an Illumina 75 bp paired-end read poly-A enrichment workflow. As such, the pre-computed MRSDs are most accurate for assessing transcript coverage with similar RNA-seq workflows. For alternative sequencing methodologies, parameter combinations, or tissues, users are invited and encouraged to generate their own MRSD scores using the scripts provided in the <code>bin/</code> subdirectory of the above GitHub toolkit, named <strong>MRSDexplorer</strong>.</p>\n            <h2><a name=\"user-content-input_files\"></a>Generation of MRSD input files</h2>\n            <p>A minimum of three files are required for each run of MRSD calculations.</p>\n            <p>For each set of RNA-seq data to be analysed, the three input files are:</p>\n            <h3><a name=\"user-content-counts\"></a>1. Splice junction read counts</h3>\n            <p>To generate transcriptome-wide junction counts, we make use of a pipeline developed by Cummings et al. (2017; <a href=\"https://doi.org/10.1126/scitranslmed.aal5209\" rel=\"nofollow\">https://doi.org/10.1126/scitranslmed.aal5209</a>). The computational steps required to produce a count file from FASTQs, including split-read alignment, are described in detail at <a href=\"https://macarthurlab.org/2017/05/31/improving-genetic-diagnosis-in-mendelian-disease-with-transcriptome-sequencing-a-walk-through/\" rel=\"nofollow\">https://macarthurlab.org/2017/05/31/improving-genetic-diagnosis-in-mendelian-disease-with-transcriptome-sequencing-a-walk-through/</a>, and the corresponding scripts are available at <a href=\"https://github.com/berylc/MendelianRNA-seq\">https://github.com/berylc/MendelianRNA-seq</a>.</p>\n            <p>The resulting junction count files (with suffix <em>.csf.splicing.txt</em>) must be merged and converted for compatibility with MRSDexplorer, which can be done using the <code>process_cummings_output.py</code> script:</p>\n            <p><strong>Usage:</strong></p>\n                <code>python process_cummings_output.py output_list output_prefix</code>\n            <p dir=\"auto\">Where <code>output_prefix</code> is the prefix of the output file (and must uniquely identify this dataset from any that have been previously generated) and <code>output_list</code> is a one-per-line list of paths to the junction count files to be merged (a single-line file is also acceptable):</p>\n            <div><pre>$&gt; head example_files/example.junc-count-files.txt\n\n            /Users/Documents/SomeDirectory/All.sample1.csf.splicing.txt\n            /Users/Documents/SomeDirectory/All.sample2.csf.splicing.txt\n            /Users/Documents/SomeDirectory/All.sample3.csf.splicing.txt\n            /Users/Documents/SomeDirectory/All.sample4.csf.splicing.txt\n            /Users/Documents/SomeDirectory/All.sample5.csf.splicing.txt\n            …</pre>\n            </div>\n            <p>This will generate a reformatted junction count file named <em>output_prefix.junc-counts.txt</em>. We recommend gzipping this file to preserve disk space. Junction counts generated through alternative approaches may be used for downstream analysis provided they are converted to an identical format to the <em>.junc-counts.txt</em> file, as shown here:</p>\n            <div><pre>$&gt; head example_files/example.junc-counts.txt\n\n            SJID\tsample1\tsample2\tsample3\tsample4\t…\tsample9\n            chr1-11995-899764\t0\t0\t0\t0\t…\t0\n            chr4-53525843-53527059\t11\t8\t8\t4\t…\t12\n            chr8-11700403-11701321\t109\t130\t211\t214\t…\t240\n            chr19-39370136-39692624\t0\t0\t1\t0\t…\t0</pre>\n            </div>\n            <h3><a name=\"user-content-depths\"></a>2. Sample sequencing depths</h3>\n            <p>To calculate MRSD, a text file must be provided detailing the sequencing depths of the samples listed in the <em>.junc-counts.txt</em> file (when using the STAR split-read aligner, these values can be found in the <em>.Log.final.out</em> file for the run). The file must be named <em>output_prefix.seq-depths.txt</em> - sharing the prefix with the corresponding <em>.junc-counts.txt</em> file - and must have four columns of the following format:</p>\n            <div><pre>$&gt; head example_files/example.seq-depths.txt\n\n            # sample_id\ttotal_input\tuniquely_mapping\tmultimapping\n            sample1\t43854892\t41543875\t-\n            sample2\t20394758\t19343265\t-\n            …\t…\t…\t…\n            sample9\t39432729\t38295432\t-</pre>\n            </div>\n            <p>The columns must be ordered as above. However, the MRSD calculation will only use one read type (of the user’s choice), and columns deemed unnecessary for analysis may be filled with any non-numerical value; they must be filled with something to pass input file validation.</p>\n            <p>Importantly, the IDs in the sample_id column must precisely match those listed in the <em>output_prefix.junc-counts.txt</em> file. Sample IDs identified in only one of the two files will be excluded from analysis.</p>\n            <h3><a name=\"user-content-genes\"></a>3. Genes or transcripts of interest</h3>\n            <p>MRSDexplorer allows users to predict the required sequencing depth for coverage of splice junctions in both whole genes and individual transcripts, and a file must be provided showing the desired gene(s) or transcript(s) for analysis. A single transcript model for each gene in the GENCODE human v19 annotation has been assigned according to a hierarchical approach, as detailed in our accompanying manuscript.</p>\n            <p>Where analysis of genes, rather than transcripts, is desired, users can provide a text file containing a list of genes of interest, one per line. This file can have up to two columns, containing the GENCODE v19 gene symbol and/or the Ensembl gene ID.</p>\n            <div><pre>$&gt; head example_files/example.genes.txt\n\n            RPL30P11    ENSG00000244573\n            QTRTD1 ENSG00000151576\n            C5orf64    ENSG00000178722\n            CASS4  ENSG00000087589\n            …\t…</pre>\n            </div>\n            <p>If the MRSDs of individual transcripts are desired, intronic coordinates for these transcripts can be provided in a BED format:</p>\n            <div><pre>$&gt; head example_files/example.introns.bed\n\n            #chr    start   end     id\n            chr3    99536887        99730547        ENST00000496116.1_CMSS1\n            chr3    99730602        99742163        ENST00000496116.1_CMSS1\n            chr3    99742366        99744272        ENST00000496116.1_CMSS1\n            chr3    99744402        99758619        ENST00000496116.1_CMSS1\n            chr20   57226462        57227129        ENST00000496117.1_STX16\n            chr20   57227143        57234679        ENST00000496117.1_STX16\n            …\t…\t…\t…</pre></div>\n            <p>The supplied coordinates should correspond to the first and final bases of the intron (with respect to chromosomal coordinates), and the ID column should contain a uniquely identifying ID for the transcript, which will be displayed in the output file(s). We have provided a script, <code>transcript_bed_generator.py</code>, which allows users to generate such BED files from a supplied GTF file and list of transcript IDs of interest.</p>\n            <p><strong>Usage:</strong></p>\n            <div><pre>python transcript_bed_generator.py transcripts annotation_gtf output_prefix\n\n            Where <code>`transcripts`</code> is a one-per-line list of transcript IDs, <code>`annotation_gtf`</code> is the GTF and <code>`output_prefix`</code> is the prefix of the resulting file name. Running this script yields a BED file with the suffix *.introns.bed* that can be used for downstream score calculation.</pre>\n            </div>\n            <h2><a name=\"user-content-run\"></a>Running MRSD</h2>\n            <p>Prior to running the final MRSD generation step, the <em>.junc-counts.txt</em> and <em>.seq-depths.txt</em> files should be moved to the <code>files/</code> subdirectory of the MRSDexplorer directory, the default location in which they are searched for. The <code>MRSDexplorer.py</code> script can then be used to generate MRSD scores. A typical MRSDexplorer command may look something like this:</p>\n            <pre>python MRSDexplorer.py --tissues all --number_reads 10 --sj_prop 0.8 --mrsd_param 0.9 --output_prefix example transcripts.introns.bed</pre>\n            <p>The only required argument is the name of the gene list file or transcript BED, however, multiple optional parameters allow customisation of the MRSD query, including:</p>\n            <p><code>--tissues = a comma-delimited list of prefixes for the desired analysis datasets. MRSDexplorer will search in the files/ subdirectory (or other directory specified by the --splice_dir option) for both a .seq-depths.txt and .junc-counts.txt file with the listed prefixes and include them in analysis if both are present (default = “all”, analysing all matching pairs of .seq-depths.txt and .junc-counts.txt files identified in the --splice_dir subdirectory).</code></p>\n            <p><code>--number_reads = desired number of reads to cover proportion of splice junctions specified in --sj_prop (default = 8)</code></p>\n            <p><code>--sj_prop = desired proportion of transcript splice junctions to be covered by read count specified in --number_reads (default = 0.75, i.e. 75%)</code></p>\n            <p><code>--mrsd_param = percentile MRSD value among control samples to be returned as overall MRSD value (default = 0.95, i.e. 95%)</code></p>\n            <p><code>--read_type = selected type of read to form the basis of the MRSD calculation (options = total, unique or multimap; default = unique, i.e. uniquely mapping)</code></p>\n            <p>Once <code>MRSDexplorer.py</code> has loaded the sequencing depths and junctions, and evaluated the MRSDs for the selected genes/transcripts, one or more files will be output into the working directory.</p>\n            <h2><a name=\"user-content-output\"></a>Output file formats</h2>\n            The primary output file of <code>MRSDexplorer.py</code> is a text file with the suffix <em>.results.mrsd.txt</em>. This file begins with a set of summary statistics detailing the number of datasets and genes/transcripts successfully surveyed, followed by a list of MRSD scores (in millions of reads) for each of the successfully mapped gene/transcript identifiers, stratified by control dataset.\n            <pre>$&gt; head example.results.mrsd.txt\n\n            INPUT PARAMETERS\n            -------------\n\n            Selected dataset(s): example\n            Selected read type: unique\n            Desired coverage of splice junctions: 8\n            Proportion of splice junctions to reach this coverage per gene: 0.75\n            Confidence level: 0.95\n\n\n            MINIMUM REQUIRED SEQUENCING DEPTH\n            ---------------------\n\n            Where '-' is given as a required read depth, median coverage of splice junctions for the given gene was 0 reads.\n\n            Number of genes successfully cross-referenced: 3322\n\n            id1\tid2\tMRSD(example)\n            AAAS\tENSG00000094914\t20.76\n            AAGAB\tENSG00000103591\t72.58\n            AARS\tENSG00000090861\t71.32\n            AARS2\tENSG00000124608\t-\n            AASS\tENSG00000008311\t-\n            ABAT\tENSG00000183044\t-\n            ABCA1\tENSG00000165029\t-\n            ABCA12\tENSG00000144452\t-\n            ABCA3\tENSG00000167972\t-\n            ABCA4\tENSG00000198691\t-\n            ABCB11\tENSG00000073734\t-\n            ABCB4\tENSG00000005471\t-\n            ABCB6\tENSG00000115657\t-\n            ABCB7\tENSG00000131269\t155.42\n            ABCC2\tENSG00000023839\t-\n            ABCC6\tENSG00000091262\t-\n            ABCC8\tENSG00000006071\t-\n            ...</pre>\n            <p>If the user supplies the <code>--output_junctions</code> option when running the <code>MRSDexplorer.py</code> script, a second output file with suffix <em>.junc-coverage.txt</em> will be generated, listing the per-million read coverage of each junction for each sample in the control datasets:</p>\n            <pre>$&gt; head example.junc-coverage.txt \n\n            #id      gene    tissue  chr     start   end     junc_no per_M_coverage\n            1       TUBB    example 6       30688340        30690314        1       37.51470823370052\n            2       TUBB    example 6       30688340        30690314        1       40.513965057139494\n            3       TUBB    example 6       30688340        30690314        1       45.10835016830831\n            4       TUBB    example 6       30688340        30690314        1       34.01621412157552\n            5       TUBB    example 6       30688340        30690314        1       33.83243377436169\n            6       TUBB    example 6       30688340        30690314        1       42.46621481799056\n            7       TUBB    example 6       30688340        30690314        1       45.870132602176476\n            8       TUBB    example 6       30688340        30690314        1       58.94871008770753\n            9       TUBB    example 6       30688340        30690314        1       37.367312127719416\n            10      TUBB    example 6       30690422        30690695        2       33.48681324439794\n            11      TUBB    example 6       30690422        30690695        2       39.289858900442304\n            12      TUBB    example 6       30690422        30690695        2       41.95609341442062\n            13      TUBB    example 6       30690422        30690695        2       35.06171795846258\n            14      TUBB    example 6       30690422        30690695        2       29.052667332037863\n            15      TUBB    example 6       30690422        30690695        2       39.30192446745443\n            16      TUBB    example 6       30690422        30690695        2       45.90391031396011\n            17      TUBB    example 6       30690422        30690695        2       54.83690306072924\n            18      TUBB    example 6       30690422        30690695        2       34.48974133680593\n            19      TUBB    example 6       30690805        30691117        3       33.68425907720689\n            20      TUBB    example 6       30690805        30691117        3       39.763706444970246\n            21      TUBB    example 6       30690805        30691117        3       39.114622537676794\n            22      TUBB    example 6       30690805        30691117        3       34.12823238981342\n            23      TUBB    example 6       30690805        30691117        3       29.55142556949774\n            24      TUBB    example 6       30690805        30691117        3       40.16491274487337\n            25      TUBB    example 6       30690805        30691117        3       47.08613022638734\n            26      TUBB    example 6       30690805        30691117        3       54.60633444239401\n            27      TUBB    example 6       30690805        30691117        3       35.517445190703604\n            ...</pre>\n            <p>The <em>.junc-coverage.txt</em> files can be very large, particularly when evaluating MRSDs for larger datasets, and so <code>--output_junctions</code> should be used with caution.</p>\n        </>\n    );\n}\n\nexport default Code;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Formik, Form } from 'formik';\nimport { Alert, Button, Tab, Tabs } from 'react-bootstrap';\nimport DataControls from '../Molecules/DataControls';\nimport GeneList from '../Molecules/GeneList';\nimport PanelList from '../Molecules/PanelList';\nimport Introduction from '../Molecules/Introduction';\nimport Code from '../Molecules/Code';\n\nconst TabContent = styled.div`\n    padding: 0.75rem;\n`;\n\nclass NewSearch extends React.Component {\n    parseGeneList(data) {\n        return data\n            .split(\"\\n\")\n            .map(val => val.trim().toUpperCase())\n            .filter(val => val !== '');\n    }\n\n    render() {\n        const setSearchTerms = this.props.setSearchTerms;\n        const updateDataFile = this.props.updateDataFile;\n        const component = this;\n\n        return (\n            <>\n                <h2>New search</h2>\n                <Formik\n                    initialValues={{ geneList: '' }}\n                    validate={ values => {\n                        const errors = {};\n\n                        if ((component.parseGeneList(values.geneList).length === 0) && (values.selectedPanel === '' || values.selectedPanel === undefined)) {\n                            errors.geneList = 'You must supply either a PanelApp panel, or a list of genes to generate the data set';\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        setSearchTerms({\n                            geneList: values.selectedPanel ? [] : component.parseGeneList(values.geneList),\n                            selectedPanel: values.selectedPanel\n                        });\n                    }}\n                >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting\n                    }) => (\n                        <Form>\n                            <Tabs defaultActiveKey=\"geneListTab\">\n                                <Tab eventKey=\"geneListTab\" title=\"Gene list\" data-testid=\"geneListTab\">\n                                    <TabContent>\n                                        <DataControls\n                                            handleChange={updateDataFile}\n                                            spliceJunctionCoverage={component.props.spliceJunctionCoverage}\n                                            coverageThreshold={component.props.coverageThreshold}\n                                            confidenceLevel={component.props.confidenceLevel}\n                                        />\n                                        <PanelList\n                                            panels={component.props.panelList}\n                                            handleChange={handleChange}\n                                        />\n                                        <GeneList\n                                            handleChange={handleChange}\n                                            handleBlur={handleBlur}\n                                            value={values.geneList}\n                                        />\n                                    </TabContent>\n                                </Tab>\n                                <Tab eventKey=\"aboutTab\" title=\"About\">\n                                    <TabContent>\n                                        <Introduction />\n                                    </TabContent>\n                                </Tab>\n                                <Tab eventKey=\"codeTab\" title=\"Code\">\n                                    <TabContent>\n                                        <Code />\n                                    </TabContent>\n                                </Tab>\n                            </Tabs>\n                            { errors.geneList && touched.geneList &&\n                                <Alert variant=\"danger\" data-testid=\"error-message\">\n                                    { errors.geneList }\n                                </Alert>\n                            }\n                            <Button variant=\"primary\" type=\"submit\">\n                                Search\n                            </Button>\n                        </Form>\n                    )}\n                </Formik>\n            </>\n        );\n    }\n}\n\nexport default NewSearch;\n","import React from 'react';\n\nclass ResultsRow extends React.Component {\n    render() {\n        const result = this.props.result;\n\n        const blood = this.props.elementGenerator(result['MRSD(Blood)']);\n        const fibro = this.props.elementGenerator(result['MRSD(Fibroblasts)']);\n        const lcl = this.props.elementGenerator(result['MRSD(LCL)']);\n        const muscle = this.props.elementGenerator(result['MRSD(Muscle)']);\n\n        return (\n            <tr key={result.gene_symbol}>\n                <td>{result.gene_symbol}</td>\n                <td>{result.ensembl_id}</td>\n                <td>{result.transcript_type}</td>\n                <td>{result.panels}</td>\n                { blood }\n                { fibro }\n                { lcl }\n                { muscle }\n            </tr>\n        );\n    }\n}\n\nexport default ResultsRow;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nimport ResultsRow from '../Atoms/ResultsRow';\n\nconst Title = styled.h2`\n    margin-top: 2.5rem;\n    margin-bottom: 1rem;\n`;\n\nconst FigureColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(FigureColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(FigureColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(FigureColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsTable extends React.Component {\n    generateElement(lower, upper) {\n        return function (value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    return (<Negative>&mdash;</Negative>);\n                case floatValue > upper:\n                    return (<Negative>{value}</Negative>);\n                case floatValue < lower:\n                    return (<Positive>{value}</Positive>);\n                default:\n                    return (<Borderline>{value}</Borderline>);\n            }\n        };\n    }\n\n    render () {\n        const elementGenerator = this.generateElement(\n            parseFloat(this.props.lower),\n            parseFloat(this.props.upper)\n        );\n\n        return (\n            <>\n                <Title>Full results</Title>\n\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th rowSpan=\"2\">Gene Symbol</th>\n                            <th rowSpan=\"2\">Ensembl ID</th>\n                            <th rowSpan=\"2\">Transcript Type</th>\n                            <th rowSpan=\"2\">Panels</th>\n                            <th colSpan=\"4\">Minimum Read Sequencing Depth</th>\n                        </tr>\n                        <tr>\n                            <th>Blood</th>\n                            <th>Fibroblasts</th>\n                            <th>LCL</th>\n                            <th>Muscle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    { this.props.results.map(result => {\n                        return (\n                            <ResultsRow\n                                result={result}\n                                elementGenerator={elementGenerator}\n                            />\n                        );}) }\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default ResultsTable;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst ControlWrapper = styled(Container)`\n    margin-bottom: 2em;\n`;\n\nclass HighlightControls extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { lowerThreshold: 50, upperThreshold: 100 };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onUpdatedValues = props.handleChange;\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const name = target.name;\n        const value = parseInt(target.value, 10);\n\n        this.setState({\n            [name]: value\n        });\n\n        let returnedValue = this.state;\n        returnedValue[name] = value;\n\n        this.onUpdatedValues(returnedValue);\n    }\n\n    render() {\n        return (\n            <ControlWrapper>\n                <Row>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"lowerThreshold\">Lower bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"lowerThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.lowerThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                    <Col>\n                        <label className=\"form-label\" htmlFor=\"upperThreshold\">Upper bound</label>\n                        <div className=\"input-group\">\n                            <input\n                                className=\"form-control\"\n                                name=\"upperThreshold\"\n                                type=\"number\"\n                                min=\"0\"\n                                onChange={this.handleChange}\n                                value={this.state.upperThreshold}\n                            />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\">million</span>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </ControlWrapper>\n        );\n    }\n}\n\nexport default HighlightControls;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Table } from 'react-bootstrap';\n\nconst Title = styled.h2`\n    margin-top: 2.5rem;\n    margin-bottom: 1rem;\n`;\n\nconst HeaderColumn = styled.td`\n    text-align: center;\n`;\nconst DataColumn = styled.td`\n    text-align: right;\n`;\n\nconst Positive = styled(HeaderColumn)`\n    background-color: #aaffaa;\n`;\nconst Borderline = styled(HeaderColumn)`\n    background-color: #fff999;\n`;\nconst Negative = styled(HeaderColumn)`\n    background-color: #ffbbbb;\n`;\n\nclass ResultsSummary extends React.Component {\n    updateStats(lower, upper) {\n        return function (stats, value) {\n            const floatValue = parseFloat(value);\n\n            switch (true) {\n                case isNaN(floatValue):\n                    stats.notCovered++;\n                    return stats;\n                case floatValue > upper:\n                    stats.negative++;\n                    return stats;\n                case floatValue < lower:\n                    stats.positive++;\n                    return stats;\n                default:\n                    stats.borderline++;\n                    return stats;\n            }\n        }\n    }\n\n    generateStats(type) {\n        return type.reduce(\n            this.updateStats(\n                parseFloat(this.props.lower),\n                parseFloat(this.props.upper)\n            ),\n            {\n                notCovered: 0,\n                negative: 0,\n                borderline: 0,\n                positive: 0\n            }\n        );\n\n    }\n\n    render () {\n        const stats = {\n            blood: this.generateStats(this.props.results.map(result => result['MRSD(Blood)'])),\n            fibroblasts: this.generateStats(this.props.results.map(result => result['MRSD(Fibroblasts)'])),\n            lcl: this.generateStats(this.props.results.map(result => result['MRSD(LCL)'])),\n            muscle: this.generateStats(this.props.results.map(result => result['MRSD(Muscle)'])),\n            total: this.props.results.length\n        };\n\n        const generateTableCell = (value) => {\n            const percentage = Math.round((parseFloat(value) / parseFloat(stats.total)) * 100, 1);\n\n            return (\n                <DataColumn>{ value } ({ percentage }%)</DataColumn>\n            );\n        };\n\n        return (\n            <>\n                <Title>Summary</Title>\n\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th rowSpan=\"2\">Sequencing reads</th>\n                            <th colspan=\"4\">Genes covered (of { stats.total })</th>\n                        </tr>\n                        <tr>\n                            <th>Blood</th>\n                            <th>Fibroblasts</th>\n                            <th>LCL</th>\n                            <th>Muscle</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <Positive>&lt; {this.props.lower}M</Positive>\n                            { generateTableCell(stats.blood.positive) }\n                            { generateTableCell(stats.fibroblasts.positive) }\n                            { generateTableCell(stats.lcl.positive) }\n                            { generateTableCell(stats.muscle.positive) }\n                        </tr>\n                        <tr>\n                            <Borderline>{this.props.lower}M to {this.props.upper}M</Borderline>\n                            { generateTableCell(stats.blood.borderline) }\n                            { generateTableCell(stats.fibroblasts.borderline) }\n                            { generateTableCell(stats.lcl.borderline) }\n                            { generateTableCell(stats.muscle.borderline) }\n                        </tr>\n                        <tr>\n                            <Negative>&gt; {this.props.upper}M</Negative>\n                            { generateTableCell(stats.blood.negative) }\n                            { generateTableCell(stats.fibroblasts.negative) }\n                            { generateTableCell(stats.lcl.negative) }\n                            { generateTableCell(stats.muscle.negative) }\n                        </tr>\n                        <tr>\n                            <Negative>Not covered</Negative>\n                            { generateTableCell(stats.blood.notCovered) }\n                            { generateTableCell(stats.fibroblasts.notCovered) }\n                            { generateTableCell(stats.lcl.notCovered) }\n                            { generateTableCell(stats.muscle.notCovered) }\n                        </tr>\n                    </tbody>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default ResultsSummary;\n","import React from 'react';\nimport { jsonToCSV } from 'react-papaparse';\n\nimport { Button } from 'react-bootstrap';\n\nimport ResultsTable from '../Molecules/ResultsTable';\nimport HighlightControls from '../Molecules/HighlightControls';\nimport ResultsSummary from '../Molecules/ResultsSummary';\n\nclass Results extends React.Component {\n    componentDidMount() {\n        this.setState({ results: this.props.getSearchResults() });\n    }\n\n    generateTsv(data) {\n        return 'data:text/tab-separated-values;charset=utf8,' + \n            jsonToCSV(data, { delimiter: \"\\t\", header: true });\n    }\n\n    updateHighlights(component) {\n        return function (values) {\n            component.setState(values);\n        };\n    }\n\n    render() {\n        const component = this;\n        const results = this.props.getSearchResults();\n        const downloadString = this.generateTsv(results);\n\n        const lowerThreshold = (this.state && this.state.lowerThreshold) ?? 50;\n        const upperThreshold = (this.state && this.state.upperThreshold) ?? 100;\n\n        return (\n            <div>\n                <HighlightControls\n                    handleChange={component.updateHighlights(component)}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n\n                <ResultsSummary\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n\n                <ResultsTable\n                    results={results}\n                    lower={lowerThreshold}\n                    upper={upperThreshold}\n                />\n                <Button variant=\"primary\" onClick={this.props.clearSearchTerms}>New search</Button>\n                &nbsp;\n                <Button href={downloadString} variant=\"secondary\" download=\"msrd_results.tsv\">Download as TSV</Button>\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\nimport './App.scss';\nimport { Container, Row, Col, Jumbotron } from \"react-bootstrap\";\n\nimport { readRemoteFile } from \"react-papaparse\";\nimport NewSearch from './Organisms/NewSearch';\nimport Results from './Organisms/Results';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cache: {},\n            data: null,\n            panelList: [],\n            selectedPanel: null,\n            spliceJunctionCoverage: 8,\n            coverageThreshold: 75,\n            confidenceLevel: 95\n        };\n    }\n\n    componentDidMount() {\n        let component = this;\n\n        readRemoteFile('./data/PanelApp_panel_names.tsv', {\n            header: false,\n            delimiter: \"\\t\",\n            complete: (parsed => {\n                component.setState({\n                    panelList: parsed.data.map((item) => item[0].trim()).filter((item) => item !== '')\n                });\n            })\n        });\n\n        this.loadData();\n    }\n\n    generateFileName(spliceJunctionCoverage, coverageThreshold, confidenceLevel) {\n        return `./data/all_GENCODE_${spliceJunctionCoverage}_0.${coverageThreshold}_0.${confidenceLevel}.results.master.short.tsv`;\n    }\n\n    loadData() {\n        let component = this;\n        const filename = this.generateFileName(\n            this.state.spliceJunctionCoverage,\n            this.state.coverageThreshold,\n            this.state.confidenceLevel\n        );\n\n        if (this.state.cache[filename] !== undefined) {\n            this.setState({\n                data: this.state.cache[filename]\n            });\n            return;\n        }\n\n        readRemoteFile(filename, {\n            header: true,\n            delimiter: \"\\t\",\n            complete: (parsed => {\n                let cache = component.state.cache;\n                cache[filename] = parsed.data;\n                component.setState({\n                    cache: cache,\n                    data: cache[filename]\n                })\n            })\n        });\n    }\n\n    updateDataFile(component) {\n        return async (data) => {\n            await component.setState(data);\n            component.loadData();\n        };\n    }\n\n    setSearchTerms(component) {\n        return (data) => {\n            component.setState(data);\n        };\n    }\n\n    clearSearchTerms(component) {\n        return () => {\n            component.setState({\n                geneList: null,\n                selectedPanel: null\n            });\n        };\n    }\n\n    getSearchResults(component) {\n        return function () {\n            if (!component.state || !component.state.data || !component.state.geneList) {\n                return [];\n            }\n\n            return component.state.data\n                .filter(item => {\n                    const panelList = item.panels ? item.panels.split(';') : [];\n\n                    return (component.state.geneList.indexOf(item.gene_symbol) !== -1)\n                        || (panelList.indexOf(component.state.selectedPanel) !== -1);\n                });\n        };\n    }\n\n    render() {\n        return (\n            <Router>\n                <Container>\n                    <Row>\n                        <Col>\n                            <Jumbotron>\n                                <h1>MRSD Web Portal</h1>\n                            </Jumbotron>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <Switch>\n                                <Route\n                                    path=\"/results\"\n                                    render={() => {\n                                        return (\n                                            !this.state || !this.state.geneList || !this.state.data ?\n                                                <Redirect to=\"/\" /> :\n                                                <Results\n                                                    clearSearchTerms={this.clearSearchTerms(this)}\n                                                    getSearchResults={this.getSearchResults(this)}\n                                                />\n                                        );\n                                    }}\n                                />\n                                <Route\n                                    path=\"/\"\n                                    render={() => {\n                                        return (\n                                            this.state && this.state.geneList && this.state.data ?\n                                                <Redirect to=\"/results\" /> :\n                                                <NewSearch\n                                                    setSearchTerms={this.setSearchTerms(this)}\n                                                    updateDataFile={this.updateDataFile(this)}\n                                                    panelList={this.state.panelList}\n                                                    spliceJunctionCoverage={this.state.spliceJunctionCoverage}\n                                                    coverageThreshold={this.state.coverageThreshold}\n                                                    confidenceLevel={this.state.confidenceLevel}\n                                                />\n                                        );\n                                    }}\n                                />\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}